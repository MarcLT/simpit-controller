;General---------------------------------------------------------------------------------------------------------------
;	Use a line starting with "BEGIN SIMPIT_MODULE_NAME"(without quotes) to add a module
;	Current valid modules are
;		SERIAL_INPUT
;		PANEL_EVENT_OUTPUT
;		PANEL_CLICK_RECORDER
;	Options are defined with format "OPTION_NAME = OPTION_VALUE"
;	Some modules have special definitions listed below
;----------------------------------------------------------------------------------------------------------------------
;Serial Input----------------------------------------------------------------------------------------------------------
;	Takes input from a serial port with a specified format string.  Serial device is expected
;		to send data that conforms to the format string
;
;	Valid options:
;		COM_PORT
;			Specifies the com port that the input should open, connection always uses a 9800 baud rate
;
;			Example: COM_PORT = COM3
;		FORMAT_STRING
;			This is a scanf format string that needs to have two integer values to extract
;				The values are event id and event state, respectivly.
;			Avoid whitespace in the format string
;			See http://www.cplusplus.com/reference/cstdio/scanf/
;				for information on format strings
;
;			Example: FORMAT_STRING = .%i,%i/
;				This would parse the following string ".12,1/.142,2/.52,0/"
;					as three events, event id 12 with state 1, event id 142 with state 2, and event id 52 with state 0
;----------------------------------------------------------------------------------------------------------------------
;Panel Event Output----------------------------------------------------------------------------------------------------
;	Handles events by sending mouse clicks to buttons on a virtual panel for a certain Orbiter vessel
;
;	Valid Options:
;		VESSEL_NAME
;			This module will, if the vessel exists, send mouse clicks to the vessel with this name
;
;			Example: VESSEL_NAME = sim_vessel
;	User definitions:
;		These determine which event states trigger which panel clicks.
;		A user definition begins with the id (used later in mapping event ids to panel clicks), followed by any number
;			of sets of four numbers.  The numbers represent "stateTrigger mx my mouseEvent"
;		State trigger decides on which state a certain mouse event will fire
;		Mx, my, and mouse event deterimine the mouse click coordinates and which internal Orbiter mouse event to use
;			Get these values from the panel-click recorder module
;
;		Example:
;			1 0 10 10 1 1 10 30 1
;				This user definition, with a id of 1, will click the coordinates (10,10) with a Orbiter mouse event of 1
;					when it recieves a state 0 event.  A state 1 event will trigger a click with mouse event = 1 at
;					coordinates (10,30)
;			2 -1 10 10 2 1 10 10 1
;				This user def will trigger a mouse event of 2 at coordinates (10,10) when recieving an event state of -1
;					and will trigger mouse event 1 at coordinates (10,10) when recieving an event state of 1
;				This type is useful for buttons which toggle different ways with left/right clicks
;	Event mapping:
;		These follow the user definitions and determine which event ids trigger which user definitions
;			Format is "event_ID user_definition_id mouse_click_id"
;				Event ID is related to any input modules you have
;				User definition selects which user definition to use
;				Mouse click id determines which interactive area to click on the panel, get this from the recorder module
;
;		Example:
;			52 1 100
;			When event 52 is fired, the module will look for which mouse click to generate based on the state indicator
;				found in user definition 1.  It will then click at the coordinates defined in the user definition, at id 100
;----------------------------------------------------------------------------------------------------------------------
;Panel click recorder--------------------------------------------------------------------------------------------------
;	For a specified vessel, records the event id,mx,my,and mouse event to ORBITER_ROOT/panel_click_recorder.log
;
;	Valid options:
;		VESSEL_NAME
;			The vessel which will have its panel mouse clicks recorded
;
;			Example: VESSEL_NAME = sim_vessel
;		EVENT_LOG_NAME
;			The name for the logging file, which will log PanelMouseClicks in the format
;				event	id	mx	my
;			If this is not set, its default is "Modules\Plugin\SimpitRecorderLog.log"
;		AUTO_RECORD
;			Set this equal to a 1 to enable recording, see information on recording below
;		RECORDING_LOG_NAME
;			The name of the recording file, which will contain a pre-made list for use with Panel Event Output
;			Defaults to "EventRecorderOutput.log"
;		STARTING_RECORD_ID
;			This changes which user definition ID number the recorder starts on.
;			Useful if you already have user definitions in a Panel Mouse Event module, so that two definition ID's
;				are not overwritten
;			Defaults to 0
;----------------------------------------------------------------------------------------------------------------------
;add simpit_mfd--------------------------------------------------------------------------------------------------------
;----------------------------------------------------------------------------------------------------------------------
;Time Based Input------------------------------------------------------------------------------------------------------
;	Allows certain events to be fired at simulation start, after a certain sim time, or after a certain
;		amount of simulation or real time.
;	Valid Definitions:
;		SIMULATION_START	eventId	eventState
;			An event with id = eventId and state = eventState will be fired on simulation start
;		REAL_TIME	dt	eventId	eventState
;			An event with id = eventId and state = eventState will be fired every dt seconds of real time
;			This will not fire when Orbiter is paused
;		SIM_TIME	dt	eventId	eventState
;			An event with id = eventId and state = eventState will be fired every dt seconds of sim time
;			Be careful, as this can be called every frame at high time accelerations
;----------------------------------------------------------------------------------------------------------------------
BEGIN TIME_BASED_INPUT
	SIMULATION_START 1 10
END
